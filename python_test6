'''
请设计一个decorator，它可作用于任何函数上，并打印该函数的执行时间：
https://www.liaoxuefeng.com/wiki/0014316089557264a6b348958f449949df42a6d3a2e542c000/0014318435599930270c0381a3b44db991cd6d858064ac0000
'''


# -*- coding: utf-8 -*-
import time, functools
import functools
def metric(fn):
    @functools.wraps(fn)
    def wae(*a,**k):
       t1=time.time()
       fn(*a,**k)
       t2=time.time()
       print('%s executed in %s ms' % (fn.__name__, t1-t2))
       return  fn(*a,**k)
    return wae

# 测试
@metric
def fast(x, y):
    time.sleep(0.0012)
    return x + y;

@metric
def slow(x, y, z):
    time.sleep(0.1234)
    return x * y * z;

f = fast(11, 22)
s = slow(11, 22, 33)

now = metric(fast)
print(now.__name__)


'''
请编写一个decorator，能在函数调用的前后打印出'begin call'和'end call'的日志

'''

import functools

def log(text):
    def decorator(func):
        @functools.wraps(func)
        def wrapper(*args, **kw):
            print("start call")
            print("func = %s" % func.__name__)
            r = func(*args, **kw)
            print('Eng call')
            return r
        return wrapper
    return decorator if isinstance(text, str) else decorator(text)   
    #在调试里面跑了一下，不写参数的时候，text拿到的实际是函数对象，就是本来func应该拿到的那个，结果让text提前吃掉了,截胡了你程序里的now。
    #decorator(text) 的意思就是，如果发现text不是str类型，那么就是本该传给内层func的函数让外层提前拿走了，并且放在了text里面。
    #这时应该手动把text传给里面那层，于是就return了 decorator(text)


@log
def f():
    pass

 

@log('execute')
def f():
    print('-------------')


print(f())
